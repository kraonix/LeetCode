class Solution {
public:
    long long maxAlternatingSum(vector<int>& nums) {
        long long even = 0, odd = 0;

        for (int num : nums) {
            long long new_even = max(even, odd + num);
            long long new_odd = max(odd, even - num);
            even = new_even;
            odd = new_odd;
        }

        return even;
    }
};

//Bottom-up approach
class Solution {
public:
    long long maxAlternatingSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<long long>> dp(n, vector<long long>(2, 0));

        // Base case:
        dp[0][0] = nums[0]; // Starting with nums[0] as the first (added) element
        dp[0][1] = 0;       // Can't start with subtraction

        for (int i = 1; i < n; ++i) {
            // dp[i][0] means last op was addition (even index in pattern)
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + nums[i]);
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - nums[i]);
        }

        return max(dp[n-1][0], dp[n-1][1]);
    }
};
