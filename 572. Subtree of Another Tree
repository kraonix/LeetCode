/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void hello(TreeNode* root, vector<int> &a){
        if(root == NULL){
            a.push_back(-100); //random number for null
            return;
        }

        a.push_back(root->val);
        hello(root->left, a);
        hello(root->right, a);
    }

    bool isIdentical(TreeNode* p, TreeNode* q) {
        vector<int> a;
        vector<int> b;

        hello(p, a);
        hello(q, b);

        if (a.size() != b.size()) return false;

        for(int i = 0; i < a.size(); i++){
            if(a[i] != b[i]){
                return false;
            }
        }
        return true;
    }


    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if (root == NULL || subRoot == NULL) {
            return subRoot == root;
        }
        if (root->val == subRoot->val && isIdentical(root, subRoot)) {
            return true;
        }
        return isSubtree (root->left, subRoot) || isSubtree (root->right, subRoot);
    }
};
