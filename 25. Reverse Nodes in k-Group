/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        vector<int> nums;

        while(head){
            nums.push_back(head->val);
            head = head->next;
        }

        if(nums.empty()) return nullptr;

        for(int i = 0; i+k <= nums.size(); i += k){
            reverse(nums.begin() + i, nums.begin() + i + k);
        }

        head = new ListNode(nums[0]);
        ListNode* curr = head;
        for(int i = 1; i < nums.size(); i++){
            curr->next = new ListNode(nums[i]);
            curr = curr->next;
        }

        return head;
    }
};
