class Solution {
public:
    string numberToWords(int num) {
        if (num == 0)
            return "Zero";

        unordered_map<int, string> numMap = {
            {1, "One"},       {2, "Two"},        {3, "Three"},
            {4, "Four"},      {5, "Five"},       {6, "Six"},
            {7, "Seven"},     {8, "Eight"},      {9, "Nine"},
            {10, "Ten"},      {11, "Eleven"},    {12, "Twelve"},
            {13, "Thirteen"}, {14, "Fourteen"},  {15, "Fifteen"},
            {16, "Sixteen"},  {17, "Seventeen"}, {18, "Eighteen"},
            {19, "Nineteen"}, {20, "Twenty"},    {30, "Thirty"},
            {40, "Forty"},    {50, "Fifty"},     {60, "Sixty"},
            {70, "Seventy"},  {80, "Eighty"},    {90, "Ninety"}};

        vector<string> thousands = {"", "Thousand", "Million", "Billion"};

        auto helper = [&](int n) {
            string res = "";
            if (n >= 100) {
                res += numMap[n / 100] + " Hundred";
                n %= 100;
                if (n > 0)
                    res += " ";
            }
            if (n >= 20) {
                res += numMap[(n / 10) * 10];
                n %= 10;
                if (n > 0)
                    res += " ";
            }
            if (n > 0 && n < 20) {
                res += numMap[n];
            }
            return res;
        };

        string result = "";
        int unit = 0;

        while (num > 0) {
            if (num % 1000 != 0) {
                string chunk = helper(num % 1000);
                if (!thousands[unit].empty())
                    chunk += " " + thousands[unit];
                if (!result.empty())
                    result = chunk + " " + result;
                else
                    result = chunk;
            }
            num /= 1000;
            unit++;
        }

        return result;
    }
};
